import numpy as np
import random
class Tabla_Hash_direccionamiento_abierto: # ej1
    __lista: np.array
    __tamaño: int
    def __init__(self,claves = 100):
        self.__tamaño = claves
        self.__lista = np.empty(self.__tamaño,dtype=object)
    
    def metodo_hash_division(self,clave):
        return int(clave) % self.__tamaño
    
    def metodo_hash_extraccion(self,clave):
        return int(clave[-3:])
    
    def metodo_hash_plegado(self,clave):
        clave_str = str(clave)
        suma = 0
        # Vamos sumando los dígitos en bloques de 2
        for i in range(0, len(clave_str), 2):
            suma += int(clave_str[i:i+2])
        # Retornamos la suma módulo del tamaño de la tabla
        return suma % self.__M
    
    def metodo_hash_cuadrado_medio(self,clave):
        cuadrado = str(int(clave )** 2)
        # Extraemos los dígitos centrales
        mid_index = len(cuadrado) // 2
        if len(cuadrado) > 2:
            resultado = int(cuadrado[mid_index - 1: mid_index + 1])
        else:
            resultado = int(cuadrado)
        return resultado % self.__M
    
    def metodo_hash_alfanumerico(self,clave):
        suma = 0
        for char in str(clave):
            suma += ord(char)  # ord() devuelve el valor ASCII de un carácter
        return suma % self.__M
    
    def insertar(self,clave):
        cont = 0
        direction = self.metodo_hash_division(clave)
        while self.__lista[direction] is not None and cont != self.__tamaño:
            direction = (direction+1) % self.__tamaño
            cont+=1
        if cont != self.__tamaño:
            self.__lista[direction] = clave
            print(f"clave en direccion{direction}")
        else:
            print("lleno")
            
    def buscar(self,clave):
        cont = 1
        direction = self.metodo_hash_division(clave)
        band = False
        while self.__lista[direction] is not None and not band:
            if self.__lista[direction] == clave:
                band = True
                
            else:
                direction = (direction+1) % self.__tamaño
                cont+=1       
        if band:
            print(f"clave {clave} encontrada en {cont+1} comparaciones")
        else:
            print("No encontrada")
            
            
"""if __name__ == '__main__':
    tabla = Tabla_Hash_direccionamiento_abierto()
    
    for _ in range(0,99):
        aux = str(random.randint(46000000,46999999))
        tabla.insertar(aux)
    tabla.insertar('46725519')
    tabla.buscar(aux)"""
class Nodo:
    __valor:str
    __sig:object
    def __init__(self,valor,sig = None):
        self.__valor = valor
        self.__sig = sig
    def get_sig(self):
        return self.__sig
    def set_sig(self,sig):
        self.__sig = sig
    def get_value(self):
        return self.__valor
class Tabla_Hash_encadenamiento: #encadenamientp ej1
    __lista: np.array
    __tamaño: int
    def __init__(self,claves = 100):
        self.__tamaño = claves
        self.__lista = np.empty(self.__tamaño,dtype=object)
        self.__colisiones = np.zeros(self.__tamaño,dtype=object)
        
    def metodo_hash_plegado(self,clave):
        clave_str = str(clave)
        suma = 0
        # Vamos sumando los dígitos en bloques de 2
        for i in range(0, len(clave_str), 2):
            suma += int(clave_str[i:i+2])
        # Retornamos la suma módulo del tamaño de la tabla
        return suma % self.__tamaño
    
    def insertar(self,clave):
        direction = self.metodo_hash_plegado(clave)
        if self.__lista[direction] is None:
            nodo = Nodo(clave)
            self.__lista[direction] = nodo
        else:
            nodo = Nodo(clave,self.__lista[direction])
            self.__lista[direction] = nodo
            self.__colisiones[direction]+=1
    def buscar(self,clave):
        direction = self.metodo_hash_plegado(clave)
        if self.__lista[direction] is not None:
            actual = self.__lista[direction]
            band = False
            while actual is not None and not band:
                if actual.get_value() == clave:
                    band = True
                else:
                    actual = actual.get_sig()   
            if band:
                print("Encontrado")     
            else:
                print("No encontrado")     
    def cant_colisiones(self,clave):
        direction = self.metodo_hash_plegado(clave)
        if self.__colisiones[direction] is not None:
            print(f"cantidad de colisiones en la direccion {direction} es de {self.__colisiones[direction]}")
        else:
            print("Direccion no existente")
"""if __name__ == '__main__':
    tabla = Tabla_Hash_encadenamiento()
    for _ in range(0,90):
        aux = str(random.randint(46000000,46999999))
        tabla.insertar(aux)
    tabla.insertar('46725519')
    tabla.insertar('46725519')
    tabla.insertar('46725519')
    tabla.insertar('46725519')
    tabla.buscar('3233232')
    tabla.cant_colisiones('46725519')
    tabla.cant_colisiones(aux)"""
    
class tabla_hash_buckets:
    __lista: np.array
    __capacidad_buckets:int
    __cant_buckets:int
    def __init__(self,capacidad = 4,claves = 1000):
        self.__capacidad_buckets = capacidad
        self.__tamaño = int((claves/capacidad) + (claves/capacidad)*0.2)
        self.__lista = np.zeros((self.__tamaño,self.__capacidad_buckets))
        self.__contadores = np.zeros(self.__tamaño,dtype=int)
        self.__direccion_overflow = int(claves/self.__capacidad_buckets)
    def metodo_extraccion(self,clave):
        return int(clave[-2:])
    def insertar(self,clave):
        direction = self.metodo_extraccion(clave)
        if self.__contadores[direction] < self.__capacidad_buckets:
            self.__lista[direction][self.__contadores[direction]]= clave
            self.__contadores[direction] +=1
        else:
            aux = self.__direccion_overflow
            while self.__contadores[aux] >=self.__capacidad_buckets and aux < self.__tamaño-1:
                aux+=1
            if aux < self.__tamaño-1:
                self.__lista[aux][self.__contadores[aux]] = clave
                self.__contadores[aux]+=1
    def buscar(self,clave):
        direction = self.metodo_extraccion(clave)
        i = 0
        cont = 0
        while i < self.__capacidad_buckets:
            if self.__lista[direction][i] == clave:
                print(f"Se encontró la clave {clave} en {cont} comparaciones\n")
                i=self.__capacidad_buckets
            else:
                cont+=1
                i+=1
    def contar_desbordados(self):
        cont = 0
        i = 0
        while i < self.__tamaño:
            if self.__contadores[i] == self.__capacidad_buckets:
                cont+=1
            i+=1
        print(f"Cantidad de buckets desbordados de los {self.__tamaño}: {cont}\n")
    def contar_subocupados(self):
        cont = 0
        i = 0
        while i < self.__tamaño:
            if self.__contadores[i] < int(self.__capacidad_buckets/3):
                cont+=1
            i+=1
        print(f"Cantidad de buckets subocupados de los {self.__tamaño}: {cont}\n")
    def contar_overflows(self):
        cont = 0
        aux = self.__direccion_overflow
        while aux < self.__tamaño:
            if self.__contadores[aux] == self.__capacidad_buckets:
                cont+=1
            aux+=1
        print(f"cantidad de claves en overflow:{cont}\n")
"""if __name__ == '__main__':
    tabla = tabla_hash_buckets()
    claves = ['46096847', '46998201', '46440547', '46410111', '46603342', '46997866', '46241466', '46051712', '46263913', '46182075', '46075363', '46315792', '46947010', '46394360', '46407782', '46400974', '46836123', '46086346', '46999104', '46704831', '46271080', '46839206', '46811850', '46361450', '46355945', '46686344', '46515712', '46170664', '46086252', '46930309', '46950558', '46200102', '46037554', '46933914', '46507387', '46743687', '46794073', '46485980', '46467902', '46474210', '46443697', '46229450', '46171015', '46883083', '46978733', '46230911', '46344107', '46984909', '46529772', '46431039', '46849603', '46093350', '46456676', '46105018', '46619944', '46510123', '46103158', '46633597', '46172857', '46904350', '46413614', '46241414', '46053676', '46289911', '46378526', '46907464', '46929951', '46375543', '46624429', '46813107', '46645833', '46898493', '46278561', '46216417', '46559636', '46957112', '46290285', '46780217', '46036865', '46265447', '46743066', '46719652', '46596179', '46557310', '46354013', '46503512', '46674104', '46985943', '46159783', '46401181', '46210228', '46474219', '46010131', '46247506', '46098286', '46207703', '46553088', '46097498', '46407840', '46732478', '46662573', '46829629', '46517364', '46517274', '46865308', '46233905', '46336429', '46154178', '46060302', '46246646', '46451278', '46137634', '46994490', '46932771', '46464756', '46747911', '46084266', '46722602', '46285683', '46380331', '46711836', '46858643', '46517951', '46811576', '46200340', '46056495', '46425077', '46591477', '46740390', '46217820', '46465103', '46844532', '46720293', '46908294', '46974372', '46466025', '46732700', '46833301', '46504310', '46629858', '46399406', '46530347', '46257128', '46153212', '46057901', '46414028', '46926213', '46167897', '46591591', '46276968', '46870176', '46529908', '46200153', '46836865', '46775521', '46390419', '46283301', '46498517', '46608798', '46988173', '46261521', '46641576', '46096867', '46444568', '46700331', '46776178', '46390286', '46981542', '46672977', '46134572', '46458842', '46383494', '46312828', '46979115', '46979745', '46975118', '46282634', '46245532', '46103894', '46165544', '46421579', '46932943', '46632456', '46378444', '46901565', '46037083', '46447739', '46864079', '46948008', '46386030', '46798014', '46445379', '46707359', '46223595', '46838450', '46516216', '46444999', '46902147', '46129296', '46203658', '46139638', '46195925', '46797160', '46152353', '46344311', '46000600', '46723221', '46155823', '46276971', '46350732', '46749418', '46441470', '46646481', '46750353', '46755610', '46711280', '46915534', '46970783', '46145825', '46662099', '46160285', '46542904', '46944992', '46112350', '46211473', '46193387', '46725562', '46870098', '46727303', '46766867', '46172225', '46769579', '46896815', '46789907', '46085310', '46116465', '46652537', '46336642', '46997753', '46539786', '46384164', '46872876', '46021412', '46387825', '46586488', '46031105', '46863040', '46437039', '46067255', '46847888', '46030720', '46922399', '46229926', '46579454', '46826672', '46117125', '46111741', '46155838', '46948770', '46032698', '46120902', '46992437', '46886934', '46322912', '46353168', '46409114', '46704720', '46455603', '46182447', '46898927', '46933751', '46123899', '46767286', '46692471', '46363537', '46294505', '46170307', '46506996', '46352838', '46968893', '46112473', '46816010', '46100642', '46585477', '46031647', '46243088', '46305983', '46206656', '46409104', '46735717', '46392158', '46233645', '46605892', '46057916', '46940474', '46119294', '46464505', '46864448', '46716504', '46338173', '46212107', '46109576', '46617178', '46807629', '46461383', '46680204', '46727865', '46668402', '46384220', '46366680', '46461958', '46587129', '46127778', '46793948', '46081676', '46173951', '46310040', '46450797', '46225358', '46589896', '46496634', '46923084', '46006147', '46129667', '46141956', '46357373', '46395344', '46772238', '46376897', '46360022', '46169647', '46440327', '46593565', '46784097', '46976039', '46957484', '46203852', '46743419', '46635355', '46057506', '46928924', '46222964', '46439992', '46381786', '46628278', '46382345', '46609113', '46487586', '46420655', '46244451', '46430619', '46139765', '46501171', '46863782', '46182133', '46835717', '46645832', '46769072', '46181912', '46423934', '46859531', '46303650', '46135405', '46900744', '46300993', '46802346', '46776521', '46037627', '46393672', '46823952', '46174235', '46507809', '46523093', '46093519', '46383989', '46649410', '46485676', '46517321', '46051193', '46279211', '46785098', '46157662', '46262807', '46550920', '46623535', '46424672', '46883011', '46411000', '46514718', '46536043', '46335379', '46762870', '46136128', '46713005', '46776404', '46083342', '46600421', '46669787', '46053031', '46013875', '46105336', '46233221', '46261680', '46504882', '46040231', '46258921', '46130586', '46520516', '46450940', '46696165', '46193771', '46335178', '46034007', '46347351', '46818725', '46331500', '46942008', '46485603', '46240583', '46633791', '46670335', '46276754', '46853148', '46407036', '46806514', '46169865', '46196750', '46221258', '46148138', '46852131', '46183189', '46152576', '46130939', '46845670', '46754295', '46541525', '46349212', '46630159', '46776879', '46366225', '46639854', '46785112', '46253707', '46295057', '46639842', '46924274', '46942956', '46111453', '46649947', '46712739', '46892440', '46954511', '46235824', '46883333', '46263961', '46229109', '46896240', '46766357', '46537487', '46115177', '46829132', '46285715', '46424415', '46969642', '46318742', '46500801', '46053932', '46899466', '46572908', '46854019', '46536115', '46280289', '46975628', '46097551', '46729925', '46295201', '46001789', '46981140', '46357385', '46261587', '46936724', '46799913', '46826729', '46516080', '46660225', '46304656', '46706969', '46017274', '46834100', '46677629', '46923771', '46430414', '46198016', '46024151', '46025997', '46091714', '46717226', '46403354', '46398661', '46493019', '46209763', '46757950', '46477860', '46348023', '46531974', '46981153', '46872677', '46036705', '46993151', '46078532', '46227418', '46156722', '46283399', '46821331', '46836651', '46334140', '46302921', '46504952', '46454029', '46213433', '46932667', '46912060', '46988571', '46774149', '46896931', '46166470', '46620976', '46105215', '46780721', '46717356', '46006295', '46374101', '46072216', '46334963', '46548904', '46869492', '46654688', '46130567', '46718043', '46530058', '46139508', '46311105', '46253284', '46138279', '46303312', '46341698', '46778164', '46414079', '46596487', '46132195', '46823050', '46763696', '46268026', '46582502', '46210884', '46175332', '46443756', '46431663', '46795373', '46938467', '46828328', '46392793', '46738256', '46662680', '46643607', '46664260', '46926638', '46190770', '46913639', '46772571', '46240867', '46749118', '46292947', '46027124', '46902183', '46165182', '46655045', '46668443', '46368767', '46864182', '46858174', '46111436', '46410388', '46390438', '46194206', '46521304', '46465049', '46868049', '46152535', '46458857', '46898937', '46727848', '46008202', '46642689', '46382935', '46386460', '46999382', '46590659', '46414423', '46700481', '46982517', '46661967', '46655330', '46174465', '46246342', '46969872', '46295274', '46588979', '46136689', '46567054', '46766083', '46707516', '46048654', '46287814', '46194381', '46252960', '46200203', '46681727', '46813010', '46881587', '46948379', '46283723', '46673908', '46875707', '46406804', '46050852', '46751207', '46913885', '46454481', '46614227', '46856026', '46630025', '46194433', '46530083', '46909596', '46329703', '46230581', '46307076', '46480983', '46603935', '46082501', '46879017', '46322309', '46993953', '46131479', '46686853', '46969541', '46008961', '46982253', '46166827', '46290198', '46074424', '46214496', '46681933', '46620112', '46905481', '46477117', '46862550', '46583035', '46571550', '46232657', '46624925', '46533783', '46827829', '46742974', '46227376', '46383168', '46197018', '46695402', '46851320', '46477424', '46291770', '46136496', '46214256', '46407646', '46743508', '46524009', '46816689', '46174969', '46120034', '46302133', '46563238', '46941977', '46148563', '46138482', '46693355', '46236747', '46176714', '46637357', '46564380', '46375705', '46755863', '46206263', '46642448', '46734743', '46101980', '46823756', '46619330', '46510000', '46413496', '46236830', '46284035', '46024199', '46433386', '46940916', '46228424', '46855684', '46099914', '46709309', '46722727', '46990450', '46011726', '46813869', '46965576', '46478580', '46724870', '46406757', '46598491', '46455781', '46660242', '46610626', '46163928', '46100577', '46470438', '46318879', '46974588', '46206073', '46815128', '46759032', '46931043', '46021894', '46618121', '46738206', '46210490', '46423350', '46587280', '46780237', '46271877', '46390356', '46239008', '46446236', '46808537', '46722495', '46344421', '46264149', '46060514', '46136306', '46966361', '46276871', '46911631', '46505382', '46678778', '46783226', '46999634', '46252414', '46043992', '46541816', '46450963', '46687191', '46645649', '46760976', '46184110', '46227706', '46627845', '46624977', '46897442', '46236602', '46977747', '46851757', '46957382', '46384346', '46141558', '46668546', '46334656', '46321916', '46364075', '46684927', '46854331', '46490509', '46444546', '46996384', '46053447', '46729805', '46392673', '46035616', '46822177', '46195776', '46689340', '46540615', '46710089', '46019319', '46610369', '46583038', '46515390', '46932754', '46396146', '46803038', '46364927', '46699675', '46176759', '46709141', '46509010', '46535161', '46603036', '46173491', '46069184', '46328129', '46109138', '46609848', '46168741', '46835527', '46136465', '46369198', '46762188', '46642302', '46824054', '46823072', '46821470', '46798703', '46275403', '46276345', '46124669', '46118618', '46129882', '46622417', '46968298', '46032785', '46461179', '46122122', '46572122', '46759127', '46717581', '46801771', '46778076', '46870520', '46203196', '46530818', '46008289', '46770450', '46306016', '46142350', '46419530', '46721885', '46037288', '46047469', '46364759', '46785752', '46301655', '46827570', '46160459', '46755321', '46425720', '46379780', '46470613', '46427766', '46064439', '46944272', '46223943', '46667320', '46310586', '46486210', '46937276', '46818536', '46348494', '46821106', '46299354', '46444030', '46832913', '46065694', '46146924', '46810202', '46105854', '46917344', '46135124', '46109685', '46359956', '46941176', '46987562', '46490392', '46356152', '46734047', '46182025', '46150853', '46832202', '46680802', '46555897', '46943677', '46879321', '46263564', '46335319', '46433653', '46718783', '46346652', '46115034', '46696612', '46604691', '46374828', '46128529', '46345923', '46404931', '46000386', '46171671', '46923482', '46635143', '46177936', '46652367', '46270784', '46311563', '46789801', '46164589', '46921249', '46968011', '46016281', '46626212', '46410713', '46148173', '46836889', '46430370', '46458842', '46534562', '46958644', '46257683', '46691308', '46590737', '46944675', '46434327', '46892177', '46316037', '46331796', '46738422', '46895979', '46159874', '46897945', '46830017', '46517976', '46119633', '46868211', '46870801', '46725839', '46057862', '46125392', '46250673', '46571172', '46043495', '46735875', '46672277', '46423797', '46496799', '46789028', '46761324', '46536257', '46065082', '46234873', '46337602', '46948519', '46479368', '46313642', '46202153', '46965364', '46564970', '46395910', '46675736', '46356760', '46726735', '46600434', '46554539', '46255143', '46677181', '46400845', '46182904', '46276754', '46498392', '46772201', '46664019', '46270066', '46318863', '46462694', '46637294', '46430328', '46090128', '46811766', '46182358', '46929433', '46899505', '46765569', '46316162', '46121447', '46560293', '46441950', '46247595', '46111246', '46565604', '46465857', '46570286', '46250848', '46399612', '46447964', '46597799', '46348254', '46308702']
    for i in claves:
        tabla.insertar(i)   
    tabla.contar_desbordados()
    tabla.contar_subocupados()
    tabla.contar_overflows()"""

    
    
             
        